import tensorflow as tf
import keras_tuner as kt
from lstm_model import LSTMModel


class CVHyperbandTuner(kt.Hyperband):
    def __init__(self, dataset, *args, **kwargs):
        self.dataset = dataset
        super().__init__(*args, **kwargs)

    def build_model(self, hp):
        model = LSTMModel(depth=hp.Int("depth", min_value=1, max_value=3), bidirectional=hp.Boolean("bidirectional"),
                          num_neurons=hp.Int("num_neurons", min_value=1, max_value=320),
                          dropout_rate=hp.Choice("dropout_rate", [0, 0.1, 0.2, 0.3, 0.4, 0.5]))
        model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
        return model

    def run_trial(self, trial, *args, **kwargs):
        hp = trial.hyperparameters
        model = self.build_model(hp)
        print(model.summary())

        num_folds = 10
        kfold = StratifiedKFold(n_splits=num_folds, shuffle=True, random_state=42)
        
        def train_generator():
            for index in train_index:
                embedding = self.dataset['Embedding'].iloc[index]
                label = self.dataset['Label'].iloc[index]
                yield embedding, label
        
        def validation_generator():
            for index in validation_index:
                embedding = self.dataset['Embedding'].iloc[index]
                label = self.dataset['Label'].iloc[index]
                yield embedding, label
        
        y_pred_probs = []
        y_pred = []
        y_true = []
        
        for train_index, validation_index in kfold.split(self.dataset['Embedding'], self.dataset['Label']):
        
            train_dataset = tf.data.Dataset.from_generator(
                    train_generator,
                    output_signature=(
                        tf.TensorSpec(shape=(None,300), dtype=tf.float16),
                        tf.TensorSpec(shape=(), dtype=tf.float16)
                        )
                )
            
            validation_dataset = tf.data.Dataset.from_generator(
                    validation_generator,
                    output_signature=(
                        tf.TensorSpec(shape=(None,300), dtype=tf.float16),
                        tf.TensorSpec(shape=(), dtype=tf.float16)
                        )
                )
            train_dataset = train_dataset.padded_batch(64)
            validation_dataset = validation_dataset.padded_batch(64)
        
            model.fit(train_dataset, epochs=hp.Int("epochs", min_value=1, max_value=100),
                      batch_size=hp.Int("batch_size", min_value=1, max_value=256), verbose=0)
        
            fold_pred_probs = model.predict(validation_dataset, verbose=0).flatten().tolist()
            y_pred_probs.extend(fold_pred_probs)
            y_pred.extend([1 if prob > 0.5 else 0 for prob in fold_pred_probs])
            y_true.extend(self.dataset['Label'].iloc[validation_index].to_list())
        
        accuracy = accuracy_score(y_true, y_pred)

        return accuracy
